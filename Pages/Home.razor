@page "/"
@using LearnShop.Models
@using LearnShop.Services
@using LearnShop.Services.Interfaces
@using LearnShop.Components
@inject IEbookService EbookService

<PageTitle>Home</PageTitle>

<PageHeader
    Title="Home"
    TextSize="2xl"
 />

<div class="container px-3 py-4 mx-auto">
    <div class="flex items-center justify-center m-6">
        <h1 class="p-2 font-semibold text-white rounded-lg md:text-3xl sm:text-sm bg-gradient-to-br from-green-500 to-blue-600 border-b-3 border-b-primary border-t-3 border-t-highlight animate-bounce">
            E-books em destaque
        </h1>
    </div>
    
    @if (isLoading) 
    {
        <Loading/>
    }
    else if (ebooks == null || !ebooks.Any()) 
    {
        <div class="py-8 text-center">
            <p>Nenhum e-book encontrado.</p>
        </div>
    }
    else 
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-7 justify-items-center">
            @foreach (var ebook in ebooks) 
            {
                <a
                    href="@($"/ebook/{ebook.Category.ToLower().Replace(" ","-")}/{ebook.Id}")"
                    target="_blank"
                    class="transition-shadow duration-300 ease-in-out">
                    <ProductCard
                        ProductTitle="@ebook.Title" 
                        ProductDescription="@ebook.Description" 
                        ProductImage="@ebook.ImageUrl" 
                        Author="@ebook.Author" 
                        Price="@ebook.Price" 
                        Publisher="@ebook.Publisher"
                        Category="@ebook.Category"
                        TextColor="#000" 
                    />
                </a>
            }
        </div>
    }
</div>

@code {
    private List<Ebook>? ebooks;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        ebooks = await EbookService.GetEbooksAsync();
        isLoading = false;
    }
}